        -:    0:Source:rainhas.cpp
        -:    1:// Copyright 2024 <Mariana Oliveira>
        -:    2:#include <iostream>
        -:    3:#include <fstream>
        -:    4:#include <vector>
        -:    5:#include <cmath>
        -:    6:#include <string>
        -:    7:#include <sstream>
        -:    8:#include <algorithm> 
        -:    9:
        1:   10:bool isValidInput(const std::string& board_str) {
        1:   11:    std::vector<std::string> rows;
        1:   12:    std::string row;
        1:   13:    std::istringstream iss(board_str);
        9:   14:    while (std::getline(iss, row)) {
       8*:   15:        if (row.size() != 8) return false;
        8:   16:        rows.push_back(row);
        -:   17:    }
       1*:   18:    if (rows.size() != 8) return false;
        -:   19:
        1:   20:    int queens_count = 0;
        9:   21:    for (const auto& r : rows) {
        8:   22:        queens_count += std::count(r.begin(), r.end(), '1');
        -:   23:    }
        1:   24:    if (queens_count != 8) return false;
        -:   25:
    #####:   26:    return true;
        1:   27:}
    #####:   28:bool isAttacking(const std::vector<std::string>& board, size_t row1, size_t col1, size_t row2, size_t col2) {
    #####:   29:    return row1 == row2 || col1 == col2 || std::abs(static_cast<int>(row1) - static_cast<int>(row2)) == std::abs(static_cast<int>(col1) - static_cast<int>(col2));
        -:   30:}
    #####:   31:void saveAttacks(const std::vector<std::string>& board, const std::string& filename) {
    #####:   32:    std::ofstream outfile(filename);
    #####:   33:    if (!outfile.is_open()) return;
    #####:   34:    for (size_t i = 0; i < board.size(); ++i) {
    #####:   35:        for (size_t j = 0; j < board[i].size(); ++j) {
    #####:   36:            if (board[i][j] == '1') {
    #####:   37:                for (size_t k = i + 1; k < board.size(); ++k) {
    #####:   38:                    for (size_t l = 0; l < board[k].size(); ++l) {
    #####:   39:                        if (board[k][l] == '1' && isAttacking(board, i, j, k, l)) {
    #####:   40:                            outfile << i << "," << j << " " << k << "," << l << "\n";
        -:   41:                        }
        -:   42:                    }
        -:   43:                }
        -:   44:            }
        -:   45:        }
        -:   46:    }
    #####:   47:    outfile.close();
    #####:   48:}
    #####:   49:bool isSafe(const std::vector<std::string>& board, int row, int col) {
    #####:   50:    for (size_t i = 0; i < static_cast<size_t>(row); ++i) {
    #####:   51:        if (board[i][col] == '1') return false;
    #####:   52:        if (col - (row - static_cast<int>(i)) >= 0 && board[i][col - (row - static_cast<int>(i))] == '1') return false;
    #####:   53:        if (col + (row - static_cast<int>(i)) < board.size() && board[i][col + (row - static_cast<int>(i))] == '1') return false;
        -:   54:    }
    #####:   55:    return true;
        -:   56:}
    #####:   57:bool solveQueens(std::vector<std::string>& board, size_t row) {
    #####:   58:    if (row >= board.size()) return true;
    #####:   59:    for (size_t col = 0; col < board[row].size(); ++col) {
    #####:   60:        if (isSafe(board, static_cast<int>(row), static_cast<int>(col))) {
    #####:   61:            board[row][col] = '1';
    #####:   62:            if (solveQueens(board, row + 1)) return true;
    #####:   63:            board[row][col] = '0';
        -:   64:        }
        -:   65:    }
    #####:   66:    return false;
        -:   67:}
        1:   68:int solve8Queens(const std::string& board_str) {
        1:   69:    if (!isValidInput(board_str)) return -1;
        -:   70:
    #####:   71:    std::vector<std::string> board;
    #####:   72:    std::istringstream iss(board_str);
    #####:   73:    std::string row;
    #####:   74:    while (std::getline(iss, row)) {
    #####:   75:        board.push_back(row);
        -:   76:    }
    #####:   77:    if (!solveQueens(board, 0)) {
    #####:   78:        saveAttacks(board, "ataques.txt");
    #####:   79:        return 0;
        -:   80:    } else {
    #####:   81:        return 1;
        -:   82:    }
    #####:   83:}
        1:   84:int solve8QueensFromFile(const std::string& filename) {
        1:   85:    std::ifstream infile(filename);
        1:   86:    if (!infile.is_open()) {
    #####:   87:        return -1; // Retorna -1 se n√£o conseguir abrir o arquivo
        -:   88:    }
        1:   89:    std::string board_str;
        1:   90:    std::string line;
        9:   91:    while (std::getline(infile, line)) {
        8:   92:        board_str += line + "\n";
        -:   93:    }
        1:   94:    infile.close();
        1:   95:    return solve8Queens(board_str);
        1:   96:}
